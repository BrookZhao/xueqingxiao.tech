schema {
  query: RootQuery
  mutation: RootMutation
}

type Article implements Node {
  title: String
  author: String
  content: Buffer
  tags(after: String, first: Int, before: String, last: Int): ArticleTagsConnection
  likes: Float
  uv: Float
  updated: Date
  _id: ID

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type ArticleConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ArticleEdge]
  count: Float
}

# An edge in a connection.
type ArticleEdge {
  # The item at the end of the edge
  node: Article

  # A cursor for use in pagination
  cursor: String!
}

# A connection to a list of items.
type ArticleTagsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ArticleTagsEdge]
  count: Float
}

# An edge in a connection.
type ArticleTagsEdge {
  # The item at the end of the edge
  node: Tag

  # A cursor for use in pagination
  cursor: String!
}

scalar Buffer

type Comment implements Node {
  content: String
  article: Article
  created: Date
  user: User
  _id: ID

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type CommentConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CommentEdge]
  count: Float
}

# An edge in a connection.
type CommentEdge {
  # The item at the end of the edge
  node: Comment

  # A cursor for use in pagination
  cursor: String!
}

scalar Date

type Navigation implements Node {
  name: String
  link: String
  _id: ID

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type NavigationConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [NavigationEdge]
  count: Float
}

# An edge in a connection.
type NavigationEdge {
  # The item at the end of the edge
  node: Navigation

  # A cursor for use in pagination
  cursor: String!
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type RootMutation {
  addArticle(input: addArticleInput!): addArticlePayload
  updateArticle(input: updateArticleInput!): updateArticlePayload
  deleteArticle(input: deleteArticleInput!): deleteArticlePayload
  addSeries(input: addSeriesInput!): addSeriesPayload
  updateSeries(input: updateSeriesInput!): updateSeriesPayload
  deleteSeries(input: deleteSeriesInput!): deleteSeriesPayload
  addTag(input: addTagInput!): addTagPayload
  updateTag(input: updateTagInput!): updateTagPayload
  deleteTag(input: deleteTagInput!): deleteTagPayload
  addComment(input: addCommentInput!): addCommentPayload
  updateComment(input: updateCommentInput!): updateCommentPayload
  deleteComment(input: deleteCommentInput!): deleteCommentPayload
  addNavigation(input: addNavigationInput!): addNavigationPayload
  updateNavigation(input: updateNavigationInput!): updateNavigationPayload
  deleteNavigation(input: deleteNavigationInput!): deleteNavigationPayload
  addUser(input: addUserInput!): addUserPayload
  updateUser(input: updateUserInput!): updateUserPayload
  deleteUser(input: deleteUserInput!): deleteUserPayload
}

type RootQuery {
  article(id: ID!): Article
  articles(
    # The ID of a Article
    id: [ID]

    # The ID of a Article
    ids: [ID]
    orderBy: orderByArticle
    title: String
    author: String
    content: Buffer
    likes: Float
    uv: Float
    updated: Date
    _id: ID
  ): [Article]
  series(
    # The ID of a Series
    id: [ID]

    # The ID of a Series
    ids: [ID]
    orderBy: orderBySeries
    name: String
    description: String
    logo: String
    _id: ID
  ): [Series]
  tag(id: ID!): Tag
  tags(
    # The ID of a Tag
    id: [ID]

    # The ID of a Tag
    ids: [ID]
    orderBy: orderByTag
    name: String
    _id: ID
  ): [Tag]
  comment(id: ID!): Comment
  comments(
    # The ID of a Comment
    id: [ID]

    # The ID of a Comment
    ids: [ID]
    orderBy: orderByComment
    content: String
    created: Date
    _id: ID
  ): [Comment]
  navigation(id: ID!): Navigation
  navigations(
    # The ID of a Navigation
    id: [ID]

    # The ID of a Navigation
    ids: [ID]
    orderBy: orderByNavigation
    name: String
    link: String
    _id: ID
  ): [Navigation]
  user(id: ID!): User
  users(
    # The ID of a User
    id: [ID]

    # The ID of a User
    ids: [ID]
    orderBy: orderByUser
    avatarUrl: String
    nickname: String
    email: String
    _id: ID
  ): [User]
  viewer: Viewer

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type Series implements Node {
  name: String
  description: String
  logo: String
  articles(after: String, first: Int, before: String, last: Int): SeriesArticlesConnection
  _id: ID

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type SeriesArticlesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [SeriesArticlesEdge]
  count: Float
}

# An edge in a connection.
type SeriesArticlesEdge {
  # The item at the end of the edge
  node: Article

  # A cursor for use in pagination
  cursor: String!
}

type Tag implements Node {
  name: String
  _id: ID

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type TagConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TagEdge]
  count: Float
}

# An edge in a connection.
type TagEdge {
  # The item at the end of the edge
  node: Tag

  # A cursor for use in pagination
  cursor: String!
}

type User implements Node {
  avatarUrl: String
  nickname: String
  email: String
  _id: ID

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]
  count: Float
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: User

  # A cursor for use in pagination
  cursor: String!
}

type Viewer implements Node {
  # The ID of an object
  id: ID!
  articles(after: String, first: Int, before: String, last: Int, orderBy: orderByArticle, title: String, author: String, content: Buffer, likes: Float, uv: Float, updated: Date, _id: ID): ArticleConnection
  article(id: ID!): Article
  series(id: ID!): Series
  tags(after: String, first: Int, before: String, last: Int, orderBy: orderByTag, name: String, _id: ID): TagConnection
  tag(id: ID!): Tag
  comments(after: String, first: Int, before: String, last: Int, orderBy: orderByComment, content: String, created: Date, _id: ID): CommentConnection
  comment(id: ID!): Comment
  navigations(after: String, first: Int, before: String, last: Int, orderBy: orderByNavigation, name: String, link: String, _id: ID): NavigationConnection
  navigation(id: ID!): Navigation
  users(after: String, first: Int, before: String, last: Int, orderBy: orderByUser, avatarUrl: String, nickname: String, email: String, _id: ID): UserConnection
  user(id: ID!): User
}

input addArticleInput {
  title: String
  author: String
  content: Buffer
  tags: [ID]
  likes: Float
  uv: Float
  updated: Date
  clientMutationId: String
}

type addArticlePayload {
  viewer: Viewer
  changedArticleEdge: changedArticleEdge
  clientMutationId: String
}

input addCommentInput {
  content: String
  article: ID
  created: Date
  user: ID
  clientMutationId: String
}

type addCommentPayload {
  viewer: Viewer
  changedCommentEdge: changedCommentEdge
  clientMutationId: String
}

input addNavigationInput {
  name: String
  link: String
  clientMutationId: String
}

type addNavigationPayload {
  viewer: Viewer
  changedNavigationEdge: changedNavigationEdge
  clientMutationId: String
}

input addSeriesInput {
  name: String
  description: String
  logo: String
  articles: [ID]
  clientMutationId: String
}

type addSeriesPayload {
  viewer: Viewer
  changedSeriesEdge: changedSeriesEdge
  clientMutationId: String
}

input addTagInput {
  name: String
  clientMutationId: String
}

type addTagPayload {
  viewer: Viewer
  changedTagEdge: changedTagEdge
  clientMutationId: String
}

input addUserInput {
  avatarUrl: String
  nickname: String
  email: String
  clientMutationId: String
}

type addUserPayload {
  viewer: Viewer
  changedUserEdge: changedUserEdge
  clientMutationId: String
}

# An edge in a connection.
type changedArticleEdge {
  # The item at the end of the edge
  node: changedArticleNode

  # A cursor for use in pagination
  cursor: String!
}

type changedArticleNode {
  title: String
  author: String
  content: Buffer
  tags(after: String, first: Int, before: String, last: Int): ArticleTagsConnection
  likes: Float
  uv: Float
  updated: Date
  _id: ID

  # The ID of an object
  id: ID!
}

# An edge in a connection.
type changedCommentEdge {
  # The item at the end of the edge
  node: changedCommentNode

  # A cursor for use in pagination
  cursor: String!
}

type changedCommentNode {
  content: String
  article: Article
  created: Date
  user: User
  _id: ID

  # The ID of an object
  id: ID!
}

# An edge in a connection.
type changedNavigationEdge {
  # The item at the end of the edge
  node: changedNavigationNode

  # A cursor for use in pagination
  cursor: String!
}

type changedNavigationNode {
  name: String
  link: String
  _id: ID

  # The ID of an object
  id: ID!
}

# An edge in a connection.
type changedSeriesEdge {
  # The item at the end of the edge
  node: changedSeriesNode

  # A cursor for use in pagination
  cursor: String!
}

type changedSeriesNode {
  name: String
  description: String
  logo: String
  articles(after: String, first: Int, before: String, last: Int): SeriesArticlesConnection
  _id: ID

  # The ID of an object
  id: ID!
}

# An edge in a connection.
type changedTagEdge {
  # The item at the end of the edge
  node: changedTagNode

  # A cursor for use in pagination
  cursor: String!
}

type changedTagNode {
  name: String
  _id: ID

  # The ID of an object
  id: ID!
}

# An edge in a connection.
type changedUserEdge {
  # The item at the end of the edge
  node: changedUserNode

  # A cursor for use in pagination
  cursor: String!
}

type changedUserNode {
  avatarUrl: String
  nickname: String
  email: String
  _id: ID

  # The ID of an object
  id: ID!
}

input deleteArticleInput {
  id: ID!
  clientMutationId: String
}

type deleteArticlePayload {
  viewer: Viewer
  ok: Boolean
  id: ID!
  clientMutationId: String
}

input deleteCommentInput {
  id: ID!
  clientMutationId: String
}

type deleteCommentPayload {
  viewer: Viewer
  ok: Boolean
  id: ID!
  clientMutationId: String
}

input deleteNavigationInput {
  id: ID!
  clientMutationId: String
}

type deleteNavigationPayload {
  viewer: Viewer
  ok: Boolean
  id: ID!
  clientMutationId: String
}

input deleteSeriesInput {
  id: ID!
  clientMutationId: String
}

type deleteSeriesPayload {
  viewer: Viewer
  ok: Boolean
  id: ID!
  clientMutationId: String
}

input deleteTagInput {
  id: ID!
  clientMutationId: String
}

type deleteTagPayload {
  viewer: Viewer
  ok: Boolean
  id: ID!
  clientMutationId: String
}

input deleteUserInput {
  id: ID!
  clientMutationId: String
}

type deleteUserPayload {
  viewer: Viewer
  ok: Boolean
  id: ID!
  clientMutationId: String
}

enum orderByArticle {
  TITLE_ASC
  TITLE_DESC
  AUTHOR_ASC
  AUTHOR_DESC
  CONTENT_ASC
  CONTENT_DESC
  LIKES_ASC
  LIKES_DESC
  UV_ASC
  UV_DESC
  UPDATED_ASC
  UPDATED_DESC
  _ID_ASC
  _ID_DESC
}

enum orderByComment {
  CONTENT_ASC
  CONTENT_DESC
  CREATED_ASC
  CREATED_DESC
  _ID_ASC
  _ID_DESC
}

enum orderByNavigation {
  NAME_ASC
  NAME_DESC
  LINK_ASC
  LINK_DESC
  _ID_ASC
  _ID_DESC
}

enum orderBySeries {
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  LOGO_ASC
  LOGO_DESC
  _ID_ASC
  _ID_DESC
}

enum orderByTag {
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum orderByUser {
  AVATARURL_ASC
  AVATARURL_DESC
  NICKNAME_ASC
  NICKNAME_DESC
  EMAIL_ASC
  EMAIL_DESC
  _ID_ASC
  _ID_DESC
}

input updateArticleInput {
  title: String
  author: String
  content: Buffer
  tags: [ID]
  likes: Float
  uv: Float
  updated: Date
  tags_add: [ID]
  id: ID!
  clientMutationId: String
}

type updateArticlePayload {
  changedArticle: Article
  clientMutationId: String
}

input updateCommentInput {
  content: String
  article: ID
  created: Date
  user: ID
  id: ID!
  clientMutationId: String
}

type updateCommentPayload {
  changedComment: Comment
  clientMutationId: String
}

input updateNavigationInput {
  name: String
  link: String
  id: ID!
  clientMutationId: String
}

type updateNavigationPayload {
  changedNavigation: Navigation
  clientMutationId: String
}

input updateSeriesInput {
  name: String
  description: String
  logo: String
  articles: [ID]
  articles_add: [ID]
  id: ID!
  clientMutationId: String
}

type updateSeriesPayload {
  changedSeries: Series
  clientMutationId: String
}

input updateTagInput {
  name: String
  id: ID!
  clientMutationId: String
}

type updateTagPayload {
  changedTag: Tag
  clientMutationId: String
}

input updateUserInput {
  avatarUrl: String
  nickname: String
  email: String
  id: ID!
  clientMutationId: String
}

type updateUserPayload {
  changedUser: User
  clientMutationId: String
}
